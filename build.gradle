// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    println "allprojects project.name = " + project.name
    repositories {
        jcenter()
    }
}

subprojects {
    println "subprojects project.name = " + project.name
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task HelloTask {
    doFirst {
        println "this object ${this.getClass().name} do first"
    }
    doLast{
        logger.debug("gradle","Hello Gradle")
    }
}

def customEachList(List list,Closure closure) {

    for (java.lang.Object o : list) {
        closure(o)
    }
}

task callCustomEachList << {
    logger.log(LogLevel.DEBUG,"callCustomEachList ")
    def list = [1,2,3,4,5,6,7,8,9,10]
    customEachList(list, {
        println it
    })
}

def customEachMap(Map map,Closure closure) {

    for(java.lang.Object o : map) {
        closure(o)
    }
}

task callCustomEachMap << {
    println "call custom each map"
    def map = ['key1':'value1','key2' : 'value2']

    customEachMap map, {
        println it.key + " " + it.value
    }
}


def method1(){
    println "context this: ${this.getClass().name} in root,method1 in root"
}

class Delegate{

    def method1(){
        println "context this: ${this.getClass().name} in delegate,method1 in delegate"
    }

    def test(Closure<Delegate> closure) {
        closure(this)
    }
}

task taskDelegate << {

    new Delegate().test {
        println "thisObject.getClass().name = " + thisObject.getClass().name
        println "owner.getClass().name = " + owner.getClass().name
        println "delegate.getClass().name = " + delegate.getClass().name

        method1()
        it.method1()
    }
}

task Hello << {
    println "Hello"
}

task World << {
    println 'World'
}

World.dependsOn(Hello)

task exTask(dependsOn : Hello) {
    doLast {
        println '--- ex Task --'
    }
}

task exMultiTask {
    dependsOn Hello,World

    doLast{
        println '-- ex MultiTask end --'
    }
}

exMultiTask.doLast {
    println "project.hasProperty(exMultiTask )" + project.hasProperty('exMultiTask')
}

ext.age = 18

ext {
    phone = '13612090400'
    name = 'gradlely'
}

task customProperty {

    ext.inner = 'inner porperty'

    doLast {
        println "project has property age ${project.hasProperty('age')}"
        println "project has property phone ${project.hasProperty('phone')}"
        println "project has property name ${project.hasProperty('name')}"
        println "project has property inner ${project.hasProperty('inner')}"

        println age
        println phone
        println name
        println inner
    }
}

def buildTime() {
    def date = new Date()
    date.format('yyyy-mm-dd hh:mm:ss')
}

task printBuildTime {
    println "outer " + buildTime()
    doLast{
        println "inner " + buildTime()
    }
}

def Task createTask = task(createTask,group : org.gradle.api.plugins.BasePlugin.BUILD_GROUP)
 createTask.doLast{
    println "${createTask.group}"
 }

class CustomTask extends DefaultTask {

    @TaskAction
    def doself() {
        println this.getClass().name + " doself"
    }
}

Task task1 = task(task1,type : CustomTask)
task1.doFirst{

    println this.getClass().name + " doFirst"
}

task1.doLast {
    println this.getClass().name + " doLast"
}

task1.doFirst {
    println this.getClass().name + " doFirst again"
}


task task2  {
    doFirst{
        println "class name is ${this.getClass().name} do First"
    }
}

task2.mustRunAfter(task1)