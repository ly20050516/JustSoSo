package com.ly.justsoso.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ly.justsoso.headline.bean.NewsItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_ITEM".
*/
public class NewsItemDao extends AbstractDao<NewsItem, Long> {

    public static final String TABLENAME = "NEWS_ITEM";

    /**
     * Properties of entity NewsItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Imgurl = new Property(1, String.class, "imgurl", false, "IMGURL");
        public final static Property Has_content = new Property(2, boolean.class, "has_content", false, "HAS_CONTENT");
        public final static Property DocUrl = new Property(3, String.class, "docUrl", false, "DOC_URL");
        public final static Property Id = new Property(4, long.class, "id", false, "ID");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Channelname = new Property(7, String.class, "channelname", false, "CHANNELNAME");
    }


    public NewsItemDao(DaoConfig config) {
        super(config);
    }
    
    public NewsItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"IMGURL\" TEXT," + // 1: imgurl
                "\"HAS_CONTENT\" INTEGER NOT NULL ," + // 2: has_content
                "\"DOC_URL\" TEXT," + // 3: docUrl
                "\"ID\" INTEGER NOT NULL ," + // 4: id
                "\"TIME\" TEXT," + // 5: time
                "\"TITLE\" TEXT," + // 6: title
                "\"CHANNELNAME\" TEXT);"); // 7: channelname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsItem entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(2, imgurl);
        }
        stmt.bindLong(3, entity.getHas_content() ? 1L: 0L);
 
        String docUrl = entity.getDocUrl();
        if (docUrl != null) {
            stmt.bindString(4, docUrl);
        }
        stmt.bindLong(5, entity.getId());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String channelname = entity.getChannelname();
        if (channelname != null) {
            stmt.bindString(8, channelname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsItem entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(2, imgurl);
        }
        stmt.bindLong(3, entity.getHas_content() ? 1L: 0L);
 
        String docUrl = entity.getDocUrl();
        if (docUrl != null) {
            stmt.bindString(4, docUrl);
        }
        stmt.bindLong(5, entity.getId());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String channelname = entity.getChannelname();
        if (channelname != null) {
            stmt.bindString(8, channelname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsItem readEntity(Cursor cursor, int offset) {
        NewsItem entity = new NewsItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgurl
            cursor.getShort(offset + 2) != 0, // has_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // docUrl
            cursor.getLong(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // channelname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsItem entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImgurl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHas_content(cursor.getShort(offset + 2) != 0);
        entity.setDocUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.getLong(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChannelname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsItem entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsItem entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsItem entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
